# bot.py - Telegram –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —á–µ–∫–æ–≤ –≤ CSV —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ

import logging
import csv
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# –ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
DATE, RECEIPT_NUMBER, AMOUNT, DISCOUNT, NOTE = range(5)

class ReceiptBot:
    def __init__(self, bot_token, csv_file_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot_token - —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
        csv_file_path - –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        self.bot_token = bot_token
        self.csv_file_path = csv_file_path
        self.setup_csv_file()
    
    def setup_csv_file(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if not os.path.exists(self.csv_file_path):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                with open(self.csv_file_path, 'w', newline='', encoding='utf-8-sig') as csvfile:
                    writer = csv.writer(csvfile, delimiter=';')
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                    headers = ["–î–∞—Ç–∞", "‚Ññ_—á–µ–∫–∞", "–°—É–º–º–∞", "–°–∫–∏–¥–∫–∞", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"]
                    writer.writerow(headers)
                    logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª: {self.csv_file_path}")
            else:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CSV —Ñ–∞–π–ª: {self.csv_file_path}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
    
    def add_receipt_to_csv(self, receipt_data):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞ –≤ CSV —Ñ–∞–π–ª
        receipt_data - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–∞
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (append)
            with open(self.csv_file_path, 'a', newline='', encoding='utf-8-sig') as csvfile:
                writer = csv.writer(csvfile, delimiter=';')
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
                row_data = [
                    receipt_data['date'],      # –î–∞—Ç–∞
                    receipt_data['number'],    # –ù–æ–º–µ—Ä —á–µ–∫–∞
                    receipt_data['amount'],    # –°—É–º–º–∞
                    receipt_data['discount'],  # –°–∫–∏–¥–∫–∞
                    receipt_data['note']       # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
                ]
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª
                writer.writerow(row_data)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–µ–∫ ‚Ññ{receipt_data['number']} –≤ CSV —Ñ–∞–π–ª")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ CSV —Ñ–∞–π–ª: {e}")
            return False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import BOT_TOKEN, CSV_FILE_PATH
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    BOT_TOKEN = "7978360023:AAHNg8Kt6M9jITc4sGY3wGqeRIMu6i2xcls"  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather
    CSV_FILE_PATH = "receipts.csv"     # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
receipt_bot = ReceiptBot(BOT_TOKEN, CSV_FILE_PATH)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
user_data_storage = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞
    """
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data_storage[user_id] = {}
    
    await update.message.reply_text(
        "üßæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á–µ—Ç–∞ —á–µ–∫–æ–≤!\n\n"
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ø—Ä–∏–º–µ—Ä: 01.12.2024):"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ –¥–∞—Ç—ã
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    date_text = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    user_data_storage[user_id]['date'] = date_text
    
    await update.message.reply_text("üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞:")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞
    return RECEIPT_NUMBER

async def get_receipt_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    receipt_number = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —á–µ–∫–∞ –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    user_data_storage[user_id]['number'] = receipt_number
    
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ —Å—É–º–º—ã
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    amount = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    user_data_storage[user_id]['amount'] = amount
    
    await update.message.reply_text("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏:")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ —Å–∫–∏–¥–∫–∏
    return DISCOUNT

async def get_discount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    discount = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
    user_data_storage[user_id]['discount'] = discount
    
    await update.message.reply_text("üìù –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –≤–≤–æ–¥ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    return NOTE

async def get_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = update.effective_user.id
    note = update.message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    user_data_storage[user_id]['note'] = note
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª
    success = receipt_bot.add_receipt_to_csv(user_data_storage[user_id])
    
    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        data = user_data_storage[user_id]
        confirmation_message = (
            "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
            f"üßæ ‚Ññ —á–µ–∫–∞: {data['number']}\n"
            f"üí∞ –°—É–º–º–∞: {data['amount']}\n"
            f"üè∑Ô∏è –°–∫–∏–¥–∫–∞: {data['discount']}\n"
            f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {data['note']}\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        await update.message.reply_text(confirmation_message)
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data_storage:
        del user_data_storage[user_id]
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã / cancel - –æ—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_data_storage:
        del user_data_storage[user_id]
    
    await update.message.reply_text(
        "‚ùå –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
    """
    help_text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —á–µ–∫–æ–≤\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/file - –ü–æ–ª—É—á–∏—Ç—å CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
        "üìù –ü–æ—Ä—è–¥–æ–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
        "1. –î–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.12.2024 –∏–ª–∏ 01.12.2024 15:30)\n"
        "2. –ù–æ–º–µ—Ä —á–µ–∫–∞ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç)\n"
        "3. –°—É–º–º–∞ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç)\n"
        "4. –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç)\n"
        "5. –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç)\n\n"
        "üìÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ CSV —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel"
    )
    await update.message.reply_text(help_text)

async def send_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ CSV —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(CSV_FILE_PATH):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(CSV_FILE_PATH, 'rb') as file:
                await update.message.reply_document(
                    document=file,
                    filename=f"receipts_{datetime.now().strftime('%Y%m%d')}.csv",
                    caption="üìÑ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–æ–≤\n\n–ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel –∏–ª–∏ Google Sheets"
                )
        else:
            await update.message.reply_text(
                "üìÑ –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (ConversationHandler)
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],  # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –∫–æ–º–∞–Ω–¥–∞ /start
        states={
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            RECEIPT_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_receipt_number)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
            DISCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discount)],
            NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_note)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(conversation_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("file", send_file))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()